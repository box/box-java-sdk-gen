plugins {
  id "java"
  id "com.diffplug.spotless" version "${spotlessVersion}"
}
group = "com.box"
archivesBaseName = "box-java-sdk-gen"
version = "0.1.0"
java {
  sourceCompatibility = "${libraryJavaVersion}"
  targetCompatibility = "${libraryJavaVersion}"
  withSourcesJar()
  withJavadocJar()
}
repositories {
  mavenCentral()
}
dependencies {
  implementation "com.fasterxml.jackson.core:jackson-annotations:${jacksonAnnotationVersion}"
  implementation "com.fasterxml.jackson.core:jackson-core:${jacksonCoreVersion}"
  implementation "com.fasterxml.jackson.core:jackson-databind:${jacksonDatabindVersion}"
  implementation "com.squareup.okhttp3:okhttp:${okhttpVersion}"
  implementation "com.squareup.okio:okio:${okioVersion}"
  implementation "org.bitbucket.b_c:jose4j:${jose4jVersion}"
  implementation "org.bouncycastle:bcprov-jdk18on:${bouncyCastleBcprovJdk18onVersion}"
  implementation "org.bouncycastle:bcpkix-jdk18on:${bouncyCastleBcpkixJdk18onVersion}"
  testImplementation "org.junit.jupiter:junit-jupiter-api:${junitApiVersion}"
  testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:${junitEngineVersion}"
}
spotless {
  java {
    googleJavaFormat "${googleJavaFormatVersion}"
    target "src/**/*.java"
  }

}
test {
  useJUnitPlatform()
  testLogging {
    events = ['passed', 'failed', 'skipped']
    showStandardStreams = true
  }

    filter {
    excludeTestsMatching 'com.box.sdkgen.test.client.ClientITest.testWithCustomBaseUrls'
    excludeTestsMatching 'com.box.sdkgen.test.client.ClientITest.testWithAsUserHeader'
    excludeTestsMatching 'com.box.sdkgen.test.client.ClientITest.testWithExtraHeaders'

    excludeTestsMatching 'com.box.sdkgen.test.filemetadata.FileMetadataITest.testGlobalFileMetadata'

    excludeTestsMatching 'com.box.sdkgen.test.foldermetadata.FolderMetadataITest.testGlobalFolderMetadata'

    excludeTestsMatching 'com.box.sdkgen.test.metadatatemplates.MetadataTemplatesITest.testMetadataTemplates'
    excludeTestsMatching 'com.box.sdkgen.test.metadatatemplates.MetadataTemplatesITest.testGetMetadataTemplateByInstance'

    excludeTestsMatching 'com.box.sdkgen.test.metadatacascadepolicies.MetadataCascadePoliciesITest.testMetadataCascadePolicies'

    excludeTestsMatching 'com.box.sdkgen.test.files.FilesITest.testGetFileThumbnail'

    excludeTestsMatching 'com.box.sdkgen.test.signtemplates.SignTemplatesITest.testGetSignTemplates'
    excludeTestsMatching 'com.box.sdkgen.test.signtemplates.SignTemplatesITest.testGetSignTemplate'

    excludeTestsMatching 'com.box.sdkgen.test.signrequests.SignRequestsITest.testCreateSignRequestWithSignerGroupId'
    excludeTestsMatching 'com.box.sdkgen.test.signrequests.SignRequestsITest.testCreateGetCancelAndListSignRequest'

    excludeTestsMatching 'com.box.sdkgen.test.webhooks.WebhooksITest.testWebhooksCrud'

    excludeTestsMatching 'com.box.sdkgen.test.transfer.TransferITest.testTransferUserContent'
  }

}
